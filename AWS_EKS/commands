#eksctl create cluster --name eksctl-test --nodegroup-name=ng-default --node-type t3.micro --nodes 2
#eksctl create cluster --name <name> --version 1.15 --node-type t3.micro --nodes 2 

#eksctl create cluster --name test-cluster 
#Create EKS cluster with one nodegroup containing 2 m5.large node

#eksctl create cluster --name test-cluster --nodegroup-name ng-default --node-type t3.micro --nodes 2
#Create EKS cluster with name test-cluster with node group name ng-default with 2 of t3.micro nodes 

#eksctl create nodegroup --config-file=eksctl-create-ng.yaml
#using yaml file to create a node group

#eksctl get nodegroup --cluster=test-cluster
#We can see the node groups in the test cluster

#eksctl create cluster --config-file=create-test-cluster.yaml
#This will create a cluster with node groups name ng-default with 2 t3.micro from the yaml(config or manifest) file

#eksctl get cluster
#to see the cluster

#Delete the cluster : test-cluster
#eksctl delete cluster --name=test-cluster

#confirm to delete
#eksctl get cluster

#When we schedule pods we need to check node and max pods number
#https://github.com/yukselbey35/amazon-eks-ami/blob/master/files/eni-max-pods.txt
Bigger the instance type, more pods
#max number of allowed pods depends on EC2 Instance type
#For demos use m5.large =~ 29 pods

#Create EKS cluster with EKS Managed Node group
#eksctl create cluster --name <name> --version 1.18 --nodegroup-name <name> --node-type t3.micro --node <how many nodes will use number> --managed
#eksctl create cluster --name demo-cluster --version 1.18 --nodegroup-name demo-managed-node-group --node-type t3.micro --nodes 4 --managed
# eksctl create cluster --name hpa-test-cluster-1 --nodegroup-name hpa-managed-node-group --node-type m5.large --nodes 2 --managed

Kubernetes worker nodes can run 2 version behind the master node

#upgrading nodes
#eksctl upgrade nodegroup --name demo-managed-node-group --cluster demo-cluster
#We can also upgrade the cluster on the AWS Console just search EKS and select the cluster